name: binaries

on: push

env:
  cache-suffix: v12
  build_flags: "-DWITH_COMMON=OFF -DWITH_BUILD_REQUIRED=ON -DWITH_BUILD_BONMIN=ON -DWITH_BONMIN=ON -DWITH_IPOPT=ON -DWITH_BUILD_LAPACK=ON -DWITH_LAPACK=ON -DWITH_MUMPS=ON -DWITH_CLP=ON -DWITH_CBC=ON -DWITH_THREAD=ON"


jobs:
  swig:
    runs-on: ubuntu-20.04

    steps:

    - uses: actions/checkout@v2.4.0
      with:
        fetch-depth: 0 # for git-restore-mtime
    - uses: chetan/git-restore-mtime-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
          registry: ghcr.io
          username: jgillis
          password: ${{ secrets.GITHUB_TOKEN }}
          
    - name: generate Python 2
      run: >
        docker run --rm -v`pwd`:/local ghcr.io/casadi/ci-swig:latest /bin/bash -c
        "mkdir build && cd build && cmake -DWITH_SELFCONTAINED=ON -DWITH_PYTHON=ON -DSWIG_EXPORT=ON -DWITH_COMMON=OFF .. && make python_source && cd .. && rm -rf build"
        
    - name: generate Python 3
      run: >
        docker run --rm -v`pwd`:/local ghcr.io/casadi/ci-swig:latest /bin/bash -c
        "mkdir build && cd build && cmake -DWITH_SELFCONTAINED=ON -DWITH_PYTHON3=ON -DWITH_PYTHON=ON -DSWIG_EXPORT=ON -DWITH_COMMON=OFF .. && make python_source && cd .. && rm -rf build"

    - name: generate Matlab
      run: >
        docker run --rm -v`pwd`:/local ghcr.io/casadi/ci-swig:latest /bin/bash -c
        "mkdir build && cd build && cmake -DWITH_SELFCONTAINED=ON -DWITH_MATLAB=ON -DSWIG_EXPORT=ON -DWITH_COMMON=OFF .. && make matlab_source && cd .. && rm -rf build"
    
    - name: set CMAKE default options
      run: |
         sed -i 's/option(SWIG_IMPORT "Export SWIG" OFF)/option(SWIG_IMPORT "Import SWIG" ON)/g' CMakeLists.txt

    - name: build archives
      run: |
        zip -rq ../casadi_source.zip . --exclude '.*' --exclude '*/.*' --exclude 'appveyor.yml'
        mv ../casadi_source.zip casadi_source.zip
      
    - uses: actions/upload-artifact@v2.2.4
      with:
        name: casadi_source_wrapper
        path: casadi_source.zip
          
  core-osx:
    runs-on: ${{matrix.image}}
    strategy:
      fail-fast: false
      matrix:
        image: [macos-11]
    env:
      CONDA_BUILD_SYSROOT: /opt/MacOSX10.9.sdk
      SDKROOT: /opt/MacOSX10.9.sdk
    steps:
      - uses: casadi/action-setup-compiler@master
        with:
          cache-suffix: ''
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0 # for git-restore-mtime
      - uses: chetan/git-restore-mtime-action@v1
      - name: Cache build dir
        uses: actions/cache@v2
        with:
          key: core-build-${{matrix.image}}-${{env.cache-suffix}}
          path: build
      - name: Build
        run: |
          rm -f build/CMakeCache.txt
          CC=${{ env.CC }} FC=${{ env.FC }} CXX=${{ env.CXX }} cmake -DCMAKE_OSX_SYSROOT=${{env.CONDA_BUILD_SYSROOT}} -Bbuild -DWITH_SELFCONTAINED=ON ${{env.build_flags}} -H.
          CC=${{ env.CC }} FC=${{ env.FC }} CXX=${{ env.CXX }} cmake --build build -v
      - run: zip -rq ${{github.job}}-${{matrix.image}}.zip build
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.job }}-${{matrix.image}}
          path: ${{ github.job }}-${{matrix.image}}.zip
          retention-days: 5

  core-dockcross:
    runs-on: ubuntu-20.04
    if: true
    strategy:
      fail-fast: false
      matrix:
        target: [manylinux1-x64,manylinux1-x86,manylinux2014-x64,manylinux2014-x86,windows-shared-x64-posix]
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0 # for git-restore-mtime
      - uses: chetan/git-restore-mtime-action@v1
      - name: Setup dockcross
        run: |
          docker pull dockcross/${{ matrix.target }}:latest
          docker run --rm dockcross/${{ matrix.target }} > dockcross
          chmod +x dockcross
          pwd
          ls -al dockcross
      - name: Cache build dir
        uses: actions/cache@v2
        with:
          key: core-build-${{ matrix.target }}-${{env.cache-suffix}}
          path: build
      - name: Build
        run: |
          rm -f build/CMakeCache.txt
          ./dockcross cmake -Bbuild -DWITH_SELFCONTAINED=ON ${{env.build_flags}} -H.

          # In MXE land, (cross).pkg-config does not listen to PKG_CONFIG_PATH straight see https://mxe.cc/#tutorial-4
          # Needed to make CoinUtils work
          ./dockcross --args "--env PKG_CONFIG_PATH_x86_64_w64_mingw32_shared_posix=/work/build/external_projects/lib64/pkgconfig:/work/build/external_projects/lib/pkgconfig:/work/build/external_projects/share/pkgconfig" -- cmake --build build -v
      - name: Easy Zip Files - fails to ignore some bad symlinks
        if: false
        uses: vimtor/action-zip@v1
        with:
          files: build/
          recursive: false
          dest: ${{github.job}}-${{matrix.target}}.zip
      - run: zip -rq ${{github.job}}-${{matrix.target}}.zip build
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{github.job}}-${{ matrix.target}}
          path: ${{github.job}}-${{matrix.target}}.zip
          retention-days: 5
          
  matrix-arch-py2:
    runs-on: ubuntu-latest
    steps:
      - id: build-matrix
        uses: jgillis/setup-build-matrix@v1.2.0
        with:
          config: |
            matrix:
              arch: [manylinux1-x64,manylinux1-x86]
              py2: ["27","35","36","37","38","39"]
            operations:
              - type: append
                matrix:
                  arch: [manylinux2014-x64,manylinux2014-x86]
                  py2: ["310"]
              - type: append
                matrix:
                  arch: [windows-shared-x64-posix]
                  py2: ["27","35","36","37","38","39","310"]
              #- type: append
              #  matrix:
              #    arch: [manylinux2014-aarch64]
              #    py2: ["35","36","37","38","39"]
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
  
  python-osx:
    needs: [core-osx,swig]
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        image: [macos-11]
        py2: ["27","35","36","37","38","39","310"]
  
    env:
      CONDA_BUILD_SYSROOT: /opt/MacOSX10.9.sdk
      SDKROOT: /opt/MacOSX10.9.sdk
    steps:
      - uses: casadi/action-setup-compiler@master
        with:
          cache-suffix: ${{matrix.py2}}
      - id: get-id
        uses: actions/github-script@v5.0.0
        env:
          py2: "${{ matrix.py2 }}"
        with:
          result-encoding: string
          script: |
            const { py2 } = process.env;
            const major = py2.substr(0,1);
            const minor = py2.substr(1);
            core.setOutput('pydot2', major+"."+minor)
            core.setOutput('WITH_PYTHON3', major==="3" ? "ON" : "OFF")
      - name: Setup Python
        uses: actions/setup-python@v2.3.1
        with:
          python-version: ${{steps.get-id.outputs.pydot2}}
      - uses: actions/download-artifact@v2
        with:
          name: casadi_source_wrapper
      - name: Unpack source
        run: unzip casadi_source.zip
      - uses: actions/download-artifact@v2
        with:
          name: core-osx-${{ matrix.image }}
      - run: unzip core-osx-${{ matrix.image }}.zip
      - name: Build
        run: |
          cmake -Bbuild -DWITH_PYTHON=ON -DWITH_PYTHON3=${{steps.get-id.outputs.WITH_PYTHON3}} -USWIG_IMPORT -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install -DSKIP_CONFIG_H_GENERATION=ON
          cmake --build build --target install -v
      - uses: jgillis/universal_grafter@master
        with:
          source_path: install/casadi
          destination_path: install/casadi
          search_paths: /usr/local/miniconda/envs/$CONDA_DEFAULT_ENV/lib
      - name: Easy Zip Files
        uses: vimtor/action-zip@v1
        with:
          files: install/
          recursive: false
          dest: casadi-osx64-py${{matrix.py2}}.zip
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: casadi-osx64-py${{matrix.py2}}
          path: casadi-osx64-py${{matrix.py2}}.zip
          retention-days: 5
      - run: cp casadi-osx64-py${{matrix.py2}}.zip casadi-osx64-py${{matrix.py2}}-${{ env.GITHUB_SHA_SHORT }}-untested.zip
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.TOKEN_PUBLIC}}
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          assets: casadi-osx64-py${{matrix.py2}}-*-untested.zip
      - name: Upload files to a GitHub release
        uses: svenstaro/upload-release-action@2.2.1
        with:
          repo_token: ${{ secrets.TOKEN_PUBLIC}}
          overwrite: true
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          file: casadi-osx64-py${{matrix.py2}}-${{ env.GITHUB_SHA_SHORT }}-untested.zip

  python-dockcross:
    needs: [core-dockcross,matrix-arch-py2,swig]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-arch-py2.outputs.matrix) }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: casadi_source_wrapper
      - name: Unpack source
        run: unzip casadi_source.zip
      - run: cat CMakeLists.txt
      - uses: actions/download-artifact@v2
        with:
          name: core-dockcross-${{ matrix.arch }}
      - run: ls
      - run: unzip core-dockcross-${{ matrix.arch }}.zip
      - name: Setup dockcross
        run: |
          docker pull dockcross/${{ matrix.arch }}:latest
          docker run --rm dockcross/${{ matrix.arch }}:latest > dockcross
          chmod +x dockcross
      - run: echo ${{env.GITHUB_WORKSPACE}}
      - run: cat $GITHUB_ENV
      - run: |
          echo -n "PYTHON_INCLUDE_DIR=" >> $GITHUB_ENV && ./dockcross bash -c "ls -d /opt/python/cp${{ matrix.py2 }}*/include/python* | head -n 1" >> $GITHUB_ENV && tail $GITHUB_ENV
      - name: (windows target only) get Python
        if: contains(matrix.arch, 'windows')
        run: |
          archx=$(python -c "print([e for e in '${{matrix.arch}}'.split('-') if e.startswith('x')][0])")
          wget https://github.com/casadi/artifacts/releases/download/evergreen/windows_python${{ matrix.py2 }}_$archx.zip -O python.zip && unzip python.zip -d python
          pwd
          tree python
          echo "PYTHON_INCLUDE_DIR=/work/python/include" >> $GITHUB_ENV
          echo "PYTHON_LIBRARIES=/work/python/libs/python${{ matrix.py2 }}.lib" >> $GITHUB_ENV
      - name: Build
        run: |
          ./dockcross cmake -Bbuild -DWITH_PYTHON=ON -DPYTHON_LIBRARIES=${{ env.PYTHON_LIBRARIES}} -DPYTHON_INCLUDE_DIR=${{ env.PYTHON_INCLUDE_DIR }} -USWIG_IMPORT  -DCMAKE_INSTALL_PREFIX=/work/install -DSKIP_CONFIG_H_GENERATION=ON
          ./dockcross cmake --build build --target install -v
      - uses: kanga333/variable-mapper@v0.2.2
        with:
          key: "${{matrix.arch}}"
          map: |
           {
              "manylinux1-x64": {"os": "linux64", "bitness": "64"},
              "manylinux1-x86": {"os": "linux32", "bitness": "32"},
              "manylinux2014-x64": {"os": "linux64", "bitness": "64"},
              "manylinux2014-x86": {"os": "linux32", "bitness": "32"},
              "windows-shared-x64-posix": {"os": "windows64", "bitness": "64"}
           }
          export_to: env
      - uses: jgillis/universal_grafter@master
        if: "!contains(matrix.arch, 'windows')"
        with:
          source_path: install/casadi
          destination_path: install/casadi
          dockcross: ${{ matrix.arch }}
          bitness: ${{env.bitness}}
      - name: Easy Zip Files
        uses: vimtor/action-zip@v1
        with:
          files: install/
          recursive: false
          dest: casadi-${{env.os}}-py${{matrix.py2}}.zip
      - run: cp casadi-${{env.os}}-py${{matrix.py2}}.zip casadi-${{env.os}}-py${{matrix.py2}}-${{ env.GITHUB_SHA_SHORT }}-untested.zip
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.TOKEN_PUBLIC}}
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          assets: casadi-${{env.os}}-py${{matrix.py2}}-*untested.zip
      - name: Upload files to a GitHub release
        uses: svenstaro/upload-release-action@2.2.1
        with:
          repo_token: ${{ secrets.TOKEN_PUBLIC}}
          overwrite: true
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          file: casadi-${{env.os}}-py${{matrix.py2}}-${{ env.GITHUB_SHA_SHORT }}-untested.zip
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: casadi-${{env.os}}-py${{matrix.py2}}
          path: casadi-${{env.os}}-py${{matrix.py2}}.zip
          retention-days: 5

  test-python:
    runs-on: ${{matrix.image}}
    needs: [python-dockcross,python-osx]
    strategy:
     fail-fast: false
     matrix:
       py2: ["27","35","36","37","38","39","310"]
       image: ["windows-latest","ubuntu-latest","macos-latest"]
       bit: [64]
       exclude:
        # No Windows 32bit builds currently
        - image: "windows-latest"
          bit: 32
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: kanga333/variable-mapper@v0.2.2
        with:
          key: "${{matrix.image}}"
          map: |
           {
              "windows-latest": {"os": "windows"},
              "ubuntu-latest": {"os": "linux"},
              "macos-latest": {"os": "osx"}
           }
          export_to: env
      - uses: actions/download-artifact@v2
        with:
          name: casadi-${{env.os}}${{matrix.bit}}-py${{matrix.py2}}
      - run: ls
      - name: Unpack source
        run: unzip casadi-${{env.os}}${{matrix.bit}}-py${{matrix.py2}}.zip
      # Make cl.exe available on Windows
      - uses: ilammy/msvc-dev-cmd@v1
      - id: get-id
        uses: actions/github-script@v5.0.0
        env:
          py2: "${{ matrix.py2 }}"
        with:
          result-encoding: string
          script: |
            const { py2 } = process.env;
            const major = py2.substr(0,1);
            const minor = py2.substr(1);
            core.setOutput('pydot2', major+"."+minor)
      - name: Setup Python
        uses: actions/setup-python@v2.3.1
        with:
          python-version: ${{steps.get-id.outputs.pydot2}}
      - env:
          PYTHONPATH: ${{ github.workspace }}/install
        run: |
          cd test/python
          pip install numpy scipy
          python -c "from casadi.tools import *;loadAllCompiledPlugins()"
          python alltests.py
      - run: cp casadi-${{env.os}}${{matrix.bit}}-py${{matrix.py2}}.zip casadi-${{env.os}}${{matrix.bit}}-py${{matrix.py2}}-${{ env.GITHUB_SHA_SHORT }}-tested.zip
      - name: Upload files to a GitHub release
        uses: svenstaro/upload-release-action@2.2.1
        with:
          repo_token: ${{ secrets.TOKEN_PUBLIC}}
          overwrite: true
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          file: casadi-${{env.os}}${{matrix.bit}}-py${{matrix.py2}}-${{ env.GITHUB_SHA_SHORT }}-tested.zip
      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.TOKEN_PUBLIC}}
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          assets: casadi-${{env.os}}${{matrix.bit}}-py${{matrix.py2}}-${{ env.GITHUB_SHA_SHORT }}-untested.zip
